import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile
from datetime import datetime, date
import pytz
import os
import re
import csv
from collections import Counter

TOKEN = '7653332960:AAGWP4vmKyaoQ-8dYyR9XIm7j0G-9aoHwnE'
ADMIN_ID = 6425885445  # <-- —Å—é–¥–∞ —Å–≤–æ–π user_id

SUPPORT_TEXT = (
    "üí¨ <b>üìû   BalticBike</b>\n\n"
    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: <a href='tel:+79992552854'>+7 999 255-28-54</a>\n"
    "Telegram: @realBalticBike\n"
    "E-mail: velo.prokat@internet.ru"
)

PHONE_NUMBER = "+7 906 211-29-40"  # <-- –Ω–æ–º–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã

bike_categories = {
    '–î–µ—Ç—Å–∫–∏–π':     {"hour": 150, "emoji": "üßí", "img": "images/Baby.png"},
    '–ü—Ä–æ–≥—É–ª–æ—á–Ω—ã–π': {"hour": 200, "emoji": "üö≤", "img": "images/City.png"},
    '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π':  {"hour": 250, "emoji": "üöµ", "img": "images/Sport.png"},
    '–§—ç—Ç–±–∞–π–∫':     {"hour": 300, "emoji": "üåÑ", "img": "images/Fat.png"},
}

QUANTITY_CHOICES = [1, 2, 3, 4, 5]
user_rent_data = {}
KALININGRAD_TZ = pytz.timezone('Europe/Kaliningrad')

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# -------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã -------- #

def main_menu_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥")],
            [types.KeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"), types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )

def categories_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(
                    text=f"{bike_categories[cat]['emoji']} {cat} ({bike_categories[cat]['hour']}‚ÇΩ/—á)"
                )
            ] for cat in bike_categories.keys()
        ] +
        [
            [types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
            [types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É üö¥üö¥üö¥...")],
            [types.KeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"), types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )

def cart_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
        ],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã
def during_rent_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
            [types.KeyboardButton(text="‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞—Ç–∞—é—Å—å?")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            [types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        ],
        resize_keyboard=True
    )

def contact_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True
    )

# -------- Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã -------- #

def confirm_rent_inline():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="confirm_rent")],
        [types.InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_cart")]
    ])

def confirm_rent_inline():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="confirm_rent")],
        [types.InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_cart")]
    ])

# -------- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—Ä–µ–Ω–¥—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É -------- #

def save_rent_to_csv(data, duration_min, total_price, period_str):
    file_exists = os.path.isfile("rents.csv")
    with open("rents.csv", "a", encoding="utf-8", newline="") as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow([
                "user_id", "user_name", "phone", "cart", "minutes", "total_price", "period"
            ])
        writer.writerow([
            data.get("user_id"),
            data.get("user_name"),
            data.get("phone"),
            str(data.get("cart")),
            duration_min,
            total_price,
            period_str
        ])

# -------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ -------- #

@dp.message(F.text == "/start")
async def greet(message: types.Message):
    try:
        photo = FSInputFile("welcome.png")
        await message.answer_photo(
            photo,
            caption=(
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –≤–µ–ª–æ–ø—Ä–æ–∫–∞—Ç–∞ BalticBike!</b>\n\n"
                "üåä –ü—Ä–æ–∫–∞—Ç–∏—Ç–µ—Å—å –ø–æ –ë–∞–ª—Ç–∏–π—Å–∫–æ–π –∫–æ—Å–µ –∏ –ø–æ–±–µ—Ä–µ–∂—å—é –Ω–∞ —Å—Ç–∏–ª—å–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞—Ö!\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –¥–æ–±–∞–≤—å—Ç–µ –≤–µ–ª–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É¬ª</b>.\n\n"
                "–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏! üö≤"
            ),
            reply_markup=main_menu_keyboard()
        )
    except Exception:
        await message.answer(
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –≤–µ–ª–æ–ø—Ä–æ–∫–∞—Ç–∞ BalticBike!</b>\n\n"
            "üåä –ü—Ä–æ–∫–∞—Ç–∏—Ç–µ—Å—å –ø–æ –ë–∞–ª—Ç–∏–π—Å–∫–æ–π –∫–æ—Å–µ –∏ –ø–æ–±–µ—Ä–µ–∂—å—é –Ω–∞ —Å—Ç–∏–ª—å–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞—Ö!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –¥–æ–±–∞–≤—å—Ç–µ –≤–µ–ª–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É¬ª</b>.\n\n"
            "–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏! üö≤",
            reply_markup=main_menu_keyboard()
        )

@dp.message(F.text == "/help")
async def help_cmd(message: types.Message):
    await message.answer(
        "<b>‚ÑπÔ∏è –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É BalticBike:</b>\n"
        "‚Ä¢ <b>/start</b> ‚Äî –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "‚Ä¢ <b>/help</b> ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ <b>/myid</b> ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID\n"
        "‚Ä¢ <b>/stats</b> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "‚Ä¢ <b>–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥</b> ‚Äî –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ <b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n"
        "‚Ä¢ –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!"
    )

@dp.message(F.text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç")
async def restart_bot(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if data and data.get("is_renting"):
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞—Ä–µ–Ω–¥—É!")
        return
    keyboard = main_menu_keyboard()
    await message.answer(
        "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ.",
        reply_markup=keyboard
    )

@dp.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    # –ï—Å–ª–∏ –∞—Ä–µ–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞—Ä–µ–Ω–¥—ã, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
    if data and data.get("is_renting"):
        # –ï—Å–ª–∏ –∞—Ä–µ–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞—Ä–µ–Ω–¥—ã
        await message.answer(
            SUPPORT_TEXT,
            reply_markup=during_rent_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∞—Ä–µ–Ω–¥—ã
        )
    else:
        # –ï—Å–ª–∏ –∞—Ä–µ–Ω–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await message.answer(
            SUPPORT_TEXT,
            reply_markup=main_menu_keyboard()  # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –∫–Ω–æ–ø–æ–∫ –∞—Ä–µ–Ω–¥—ã
        )



@dp.message(F.text == "‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞—Ç–∞—é—Å—å?")
async def time_spent(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    if data and data.get("is_renting"):
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã
        start_time = data["start_time"]
        end_time = datetime.now(KALININGRAD_TZ)
        duration = end_time - start_time
        minutes = int(duration.total_seconds() // 60)

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ —á–∞—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –º–∏–Ω—É—Ç–∞—Ö
        if minutes < 60:
            time_str = f"{minutes} –º–∏–Ω"
        else:
            hours = minutes // 60
            minutes_left = minutes % 60
            time_str = f"{hours} —á {minutes_left} –º–∏–Ω"

        await message.answer(
            f"‚è± –í—ã –∫–∞—Ç–∞–µ—Ç–µ—Å—å —É–∂–µ {time_str}.",
            reply_markup=during_rent_keyboard()
        )
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞! –í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=main_menu_keyboard()
        )

@dp.message(F.text == "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥")
async def start_rent_button(message: types.Message):
    user_id = message.from_user.id
    user_rent_data[user_id] = {
        "cart": {},
        "start_time": None,
        "awaiting_quantity": False,
        "last_category": None,
        "is_renting": False,
        "phone": None,
        "asked_phone": False,
    }
    keyboard = categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=keyboard)

@dp.message(lambda m: any(m.text and m.text.startswith(bike_categories[cat]['emoji']) for cat in bike_categories))
async def select_category(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_rent_data:
        await start_rent_button(message)
        return
    data = user_rent_data[user_id]
    if data["is_renting"]:
        await message.answer("–ê—Ä–µ–Ω–¥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç.", reply_markup=during_rent_keyboard())
        return

    cat_name = None
    for cat, info in bike_categories.items():
        pattern = f"^{re.escape(info['emoji'])} {cat}"
        if re.match(pattern, message.text):
            cat_name = cat
            break
    if not cat_name:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data["awaiting_quantity"] = True
    data["last_category"] = cat_name

    qty_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=str(qty)) for qty in QUANTITY_CHOICES],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
        ],
        resize_keyboard=True
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å
    img_path = bike_categories[cat_name]["img"]
    if os.path.exists(img_path):
        await message.answer_photo(
            FSInputFile(img_path),
            caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {bike_categories[cat_name]['emoji']} <b>{cat_name}</b>\n–¶–µ–Ω–∞: {bike_categories[cat_name]['hour']}‚ÇΩ/—á–∞—Å\n\n–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?",
            reply_markup=qty_keyboard
        )
    else:
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {bike_categories[cat_name]['emoji']} <b>{cat_name}</b>\n–¶–µ–Ω–∞: {bike_categories[cat_name]['hour']}‚ÇΩ/—á–∞—Å\n\n–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?",
            reply_markup=qty_keyboard
        )

@dp.message(F.text == "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def back_to_category(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_rent_data:
        user_rent_data[user_id]["awaiting_quantity"] = False
        user_rent_data[user_id]["last_category"] = None
    keyboard = categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message(lambda m: m.from_user.id in user_rent_data and user_rent_data[m.from_user.id]["awaiting_quantity"])
async def select_quantity(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data[user_id]
    if message.text == "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        await back_to_category(message)
        return
    try:
        qty = int(message.text)
        if qty not in QUANTITY_CHOICES:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ!")
        return
    cat = data["last_category"]
    data["cart"][cat] = data["cart"].get(cat, 0) + qty
    data["awaiting_quantity"] = False
    data["last_category"] = None
    keyboard = categories_keyboard()
    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ {qty} |{cat}| –≤–µ–ª–æ—Å–∏–ø–µ–¥(–∞).\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É¬ª</b>.",
        reply_markup=keyboard
    )

@dp.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if not data or not data["cart"]:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –¥–ª—è –∞—Ä–µ–Ω–¥—ã.", reply_markup=categories_keyboard())
        return
    cart_str = "\n".join([
        f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)"
        for cat, cnt in data["cart"].items()
    ])
    total_hour_price = sum([bike_categories[cat]['hour'] * cnt for cat, cnt in data["cart"].items()])
    await message.answer(
        f"–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n{cart_str}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 —á–∞—Å: {total_hour_price}‚ÇΩ</b>",
        reply_markup=cart_keyboard()
    )

@dp.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_rent_data:
        user_rent_data[user_id]["cart"] = {}
        user_rent_data[user_id]["is_renting"] = False
        user_rent_data[user_id]["start_time"] = None
    keyboard = categories_keyboard()
    await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã —Å–Ω–æ–≤–∞.", reply_markup=keyboard)


@dp.message(F.text == "–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É üö¥üö¥üö¥...")
async def start_rent_preview(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    if not data or not data["cart"]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–µ–ª–æ—Å–∏–ø–µ–¥.")
        return

    cart_str = "\n".join([
        f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)"
        for cat, cnt in data["cart"].items()
    ])

    total_hour_price = sum([bike_categories[cat]['hour'] * cnt for cat, cnt in data["cart"].items()])

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É"
    await message.answer(
        "–í—ã –Ω–∞—á–∞–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        reply_markup=types.ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    await message.answer(
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–µ—Ö–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "- –¢–æ—Ä–º–æ–∑–∞ –∏ —à–∏–Ω—ã.\n"
        "- –°–∏–¥–µ–Ω—å–µ –ø–æ–¥ –≤–∞—à —Ä–æ—Å—Ç.\n\n"
        "<b><u>–¢–µ–ø–µ—Ä—å —Å–æ–±–ª—é–¥–∞–π—Ç–µ —ç—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</u></b>\n"
        "- <b>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!</b> –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–æ—Ä–æ–≥–æ–π.\n"
        "- <b>–ù–µ –≥–æ–Ω–∏—Ç–µ!</b> –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø–æ–µ–∑–¥–∫–æ–π.\n"
        "- <b>–ù–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥.</b> –£–¥–æ–±—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ.\n"
        "- <b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ –Ω–∞ –ø–æ–¥—ä—ë–º–∞—Ö –∏ —Å–ø—É—Å–∫–∞—Ö.</b> –î–æ—Ä–æ–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ä–æ–≤–Ω—ã–º–∏.\n"
        "- <b>–ë–µ—Ä–µ–≥–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥.</b> –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –µ–≥–æ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n\n"

    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n{cart_str}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"<b>üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 —á–∞—Å: {total_hour_price} —Ä—É–±.</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä–µ–Ω–¥—É¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É.",
        reply_markup=confirm_rent_inline()  # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
    )

@dp.callback_query(F.data == "back_to_cart")
async def back_to_cart(callback: types.CallbackQuery):
    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä–µ–Ω–¥—É" –∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É"
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å–Ω–æ–≤–∞
    user_id = callback.from_user.id
    data = user_rent_data.get(user_id)

    if not data or not data["cart"]:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –¥–ª—è –∞—Ä–µ–Ω–¥—ã.", reply_markup=categories_keyboard())
        return

    cart_str = "\n".join([f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)" for cat, cnt in data["cart"].items()])
    total_hour_price = sum([bike_categories[cat]['hour'] * cnt for cat, cnt in data["cart"].items()])

    await callback.message.answer(
        f"–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n{cart_str}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 —á–∞—Å: {total_hour_price}‚ÇΩ</b>",
        reply_markup=cart_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ—Ä–∑–∏–Ω—ã
    )

@dp.callback_query(F.data == "confirm_rent")
async def confirm_rent_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = user_rent_data.get(user_id)

    if not data:
        await callback.message.answer("–û—à–∏–±–∫–∞! –ù–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        return

    if not data["phone"] and not data["asked_phone"]:
        data["asked_phone"] = True
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã.", reply_markup=contact_keyboard())
        await callback.answer()
        return

    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä–µ–Ω–¥—É" –∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É"
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞—Ä–µ–Ω–¥—ã
    await start_rent_real(callback.message)
    await callback.answer()

async def start_rent_real(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data[user_id]
    data["start_time"] = datetime.now(KALININGRAD_TZ)
    data["is_renting"] = True
    keyboard = during_rent_keyboard()
    cart_str = "\n".join([
        f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)"
        for cat, cnt in data["cart"].items()
    ])

    total_hour_price = sum([bike_categories[cat]['hour'] * qty for cat, qty in data["cart"].items()])

    try:
        await bot.send_message(
            ADMIN_ID,
            f"–ù–ê–ß–ê–õ–ê–°–¨ –ê–†–ï–ù–î–ê!\n"
            f"User: {message.from_user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone'] if data['phone'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"id: {message.from_user.id}\n"
            f"–í—Ä–µ–º—è: {datetime.now(KALININGRAD_TZ).strftime('%H:%M')}\n"
            f"–ö–æ—Ä–∑–∏–Ω–∞:\n{cart_str}"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–Ω–∞—á–∞–ª–æ): {e}")

    await message.answer(
        f"–í—ã –∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏:\n{cart_str}\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"<b>üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –∑–∞ 1 —á–∞—Å: {total_hour_price} —Ä—É–±.</b>\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∫–∞—Ç–∞—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É'.",
        reply_markup=keyboard
    )

@dp.message(F.text == "üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É")
async def finish_rent(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if not data or not data["is_renting"]:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∞—Ä–µ–Ω–¥—É. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –∏ –Ω–∞—á–Ω–∏—Ç–µ –∞—Ä–µ–Ω–¥—É.")
        return
    end_time = datetime.now(KALININGRAD_TZ)
    start_time = data["start_time"]
    duration = end_time - start_time
    minutes = int(duration.total_seconds() // 60)

    # –õ–æ–≥–∏–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏:
    if minutes < 15:
        rounded_minutes = 0  # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 15 –º–∏–Ω—É—Ç, –Ω–µ —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è
    else:
        remainder = minutes % 15
        if remainder < 8:  # –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω—å—à–µ 8 –º–∏–Ω—É—Ç, –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
            rounded_minutes = (minutes // 15) * 15
        else:  # –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω 8 –º–∏–Ω—É—Ç–∞–º, –æ–∫—Ä—É–≥–ª—è–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
            rounded_minutes = ((minutes // 15) + 1) * 15

    # –ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print(f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {minutes} –º–∏–Ω—É—Ç, –æ–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ: {rounded_minutes} –º–∏–Ω—É—Ç")

    if rounded_minutes == 0:
        await message.answer("–í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –º–µ–Ω—å—à–µ 15 –º–∏–Ω—É—Ç. –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.")
        return

    start_str = start_time.strftime("%H:%M")
    end_str = end_time.strftime("%H:%M")
    hours_part = rounded_minutes // 60
    minutes_part = rounded_minutes % 60
    if hours_part > 0:
        ride_time = f"{hours_part} —á {minutes_part} –º–∏–Ω"
    else:
        ride_time = f"{minutes_part} –º–∏–Ω"
    period_str = f"{start_str} ‚Äî {end_str}"

    total_price = 0
    lines = []
    for cat, qty in data["cart"].items():
        hour_price = bike_categories[cat]["hour"]
        emoji = bike_categories[cat]['emoji']

        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        minute_price = hour_price / 60
        price = int(minute_price * rounded_minutes)
        line = f"{emoji} <b>{cat}</b>: {qty} —à—Ç. √ó {rounded_minutes} –º–∏–Ω √ó {minute_price:.2f}‚ÇΩ = {price * qty}‚ÇΩ"
        lines.append(line)
        total_price += price * qty

    try:
        await bot.send_message(
            ADMIN_ID,
            f"–ó–ê–í–ï–†–®–ï–ù–ê –ê–†–ï–ù–î–ê!\n"
            f"User: {message.from_user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone'] if data.get('phone') else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"id: {message.from_user.id}\n"
            f"–í—Ä–µ–º—è: {start_str} ‚Äî {end_str} ({ride_time})\n"
            f"–ö–æ—Ä–∑–∏–Ω–∞: {data['cart']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±."
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–∫–æ–Ω–µ—Ü): {e}")
    keyboard = main_menu_keyboard()
    await message.answer(
        f"–í—ã –∫–∞—Ç–∞–µ—Ç–µ—Å—å {rounded_minutes} –º–∏–Ω—É—Ç(—ã) –Ω–∞:\n"
        + "\n".join(lines) +
        "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        f"\n<b>üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <u>{total_price} —Ä—É–±.</u></b>\n\n"
        "<b>üí∏ –û–ø–ª–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã –ø–æ –°–ë–ü</b>\n"
        f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –Ω–æ–º–µ—Ä:\n"
        f"<code>{PHONE_NUMBER}</code> <u>–°–±–µ—Ä–±–∞–Ω–∫</u>\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞–∂–∏—Ç–µ —á–µ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
        reply_markup=keyboard
    )


@dp.message(F.content_type == types.ContentType.CONTACT)
async def get_contact(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if not data:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã.")
        return
    data["phone"] = message.contact.phone_number
    await start_rent_real(message)

@dp.message(F.text == "/myid")
async def my_id(message: types.Message):
    await message.answer(f"–í–∞—à user_id: {message.from_user.id}")

@dp.message(F.text == "/stats")
async def stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        with open("rents.csv", encoding="utf-8") as f:
            reader = list(csv.DictReader(f))
    except FileNotFoundError:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∫–∞—Ç–∞—Ö.")
        return

    total_rents = len(reader)
    today = date.today().isoformat()
    today_rents = [row for row in reader if today in row["period"]]
    today_count = len(today_rents)

    bikes_counter = Counter()
    total_income = 0
    total_minutes = 0

    for row in reader:
        cart = eval(row["cart"])
        for cat, qty in cart.items():
            bikes_counter[cat] += int(qty)
        total_income += int(row["total_price"])
        total_minutes += int(row["minutes"])

    most_popular = bikes_counter.most_common(1)
    popular_bike = most_popular[0][0] if most_popular else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    avg_minutes = total_minutes // total_rents if total_rents else 0

    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫–∞—Ç–∞</b>\n"
        f"–í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ–∫–∞—Ç–æ–≤: <b>{total_rents}</b>\n"
        f"–ü—Ä–æ–∫–∞—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{today_count}</b>\n"
        f"–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–µ–ª–∏–∫: <b>{popular_bike}</b>\n"
        f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_income} —Ä—É–±.</b>\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: <b>{avg_minutes} –º–∏–Ω</b>"
    )

# --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã, –µ—Å–ª–∏ –∞—Ä–µ–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ --- #
@dp.message(lambda m: m.from_user.id in user_rent_data and user_rent_data[m.from_user.id].get("is_renting"))
async def status_time_active(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if data and data.get("is_renting"):
        duration = datetime.now(KALININGRAD_TZ) - data["start_time"]
        minutes = int(duration.total_seconds() // 60)
        await message.answer(
            f"‚è± –°–µ–π—á–∞—Å –≤–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —É–∂–µ {minutes} –º–∏–Ω.\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∫–∞—Ç–∞—Ç—å—Å—è.",
            reply_markup=during_rent_keyboard()
        )

# --- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç --- #
@dp.message()
async def fallback(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëá\n"
        "–¢–∞–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–π–¥—ë—Ç –±—ã—Å—Ç—Ä–µ–µ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫!"
    )

# -------- –ó–∞–ø—É—Å–∫ -------- #
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

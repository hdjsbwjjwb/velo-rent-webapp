import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile
from datetime import datetime, date
import json
import pytz
import os
import re
import csv
import pandas as pd
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
from collections import Counter

from dotenv import load_dotenv
load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
TOKEN = os.getenv("BOT_TOKEN")  # –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω

import gspread
from oauth2client.service_account import ServiceAccountCredentials


import traceback

def save_rent_to_gsheet(data, duration_min, total_price, period_str):
    print("save_rent_to_gsheet –≤—ã–∑–≤–∞–Ω–∞")
    try:
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open_by_key("1dXcmUr0Dtx1fylu3DaUdZigFwkjTKnPCkPf9OcuiGOE").sheet1
        
        cart_human = "\n".join([f"{cat} ‚Äî {qty}" for cat, qty in data.get("cart", {}).items()])
        
        sheet.append_row([
            data.get("user_id"),
            data.get("user_name"),
            data.get("phone"),
            json.dumps(data.get("cart"), ensure_ascii=False),
            cart_human,
            duration_min,
            total_price,
            period_str
        ])
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google –¢–∞–±–ª–∏—Ü—É")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É:")
        traceback.print_exc()
        with open("gspread_error.log", "a") as f:
            f.write(f"{datetime.now()} ‚Äî –û—à–∏–±–∫–∞:\n")
            traceback.print_exc(file=f)

ADMIN_ID = 6425885445  # <-- —Å—é–¥–∞ —Å–≤–æ–π user_id

SUPPORT_TEXT = (
    "üí¨ <b>üìû   BalticBike</b>\n\n"
    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: <a href='tel:+79992552854'>+7 999 255-28-54</a>\n"
    "Telegram: @realBalticBike\n"
    "E-mail: velo.prokat@internet.ru"
)

PHONE_NUMBER = "+7 906 211-29-40"  # <-- –Ω–æ–º–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã

bike_categories = {
    '–î–µ—Ç—Å–∫–∏–π':     {"hour": 150, "emoji": "üßí", "img": "images/Baby.jpg"},
    '–ü—Ä–æ–≥—É–ª–æ—á–Ω—ã–π': {"hour": 200, "emoji": "üö≤", "img": "images/City.jpg"},
    '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π':  {"hour": 250, "emoji": "üöµ", "img": "images/Sport.jpg"},
    '–§—ç—Ç–±–∞–π–∫':     {"hour": 300, "emoji": "üåÑ", "img": "images/Fat.jpg"},
}

QUANTITY_CHOICES = [1, 2, 3, 4, 5]
user_rent_data = {}
KALININGRAD_TZ = pytz.timezone('Europe/Kaliningrad')

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# -------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã -------- #

def main_menu_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"), types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )

def categories_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(
                    text=f"{bike_categories[cat]['emoji']} {cat} ({bike_categories[cat]['hour']}‚ÇΩ/—á)"
                )
            ] for cat in bike_categories.keys()
        ] +
        [
            [types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
            [types.KeyboardButton(text="–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É üö¥üö¥üö¥...")],
            [types.KeyboardButton(text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"), types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )

def cart_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
        ],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã
def during_rent_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
            [types.KeyboardButton(text="‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞—Ç–∞—é—Å—å?")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            [types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        ],
        resize_keyboard=True
    )

def contact_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]],
        resize_keyboard=True
    )

# -------- Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã -------- #

def confirm_rent_inline():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="confirm_rent")],
        [types.InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_cart")]
    ])


# -------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ -------- #

@dp.message(F.text == "/start")
async def greet(message: types.Message):
    try:
        photo = FSInputFile("welcome.png")
        await message.answer_photo(
            photo,
            caption=(
                "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –≤–µ–ª–æ–ø—Ä–æ–∫–∞—Ç–∞ BalticBike!</b>\n\n"
                "üåä –ü—Ä–æ–∫–∞—Ç–∏—Ç–µ—Å—å –ø–æ –ë–∞–ª—Ç–∏–π—Å–∫–æ–π –∫–æ—Å–µ –∏ –ø–æ–±–µ—Ä–µ–∂—å—é –Ω–∞ —Å—Ç–∏–ª—å–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞—Ö!\n"
            )
        )
    except Exception:
        await message.answer(
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –≤–µ–ª–æ–ø—Ä–æ–∫–∞—Ç–∞ BalticBike!</b>\n\n"
            "üåä –ü—Ä–æ–∫–∞—Ç–∏—Ç–µ—Å—å –ø–æ –ë–∞–ª—Ç–∏–π—Å–∫–æ–π –∫–æ—Å–µ –∏ –ø–æ–±–µ—Ä–µ–∂—å—é –Ω–∞ —Å—Ç–∏–ª—å–Ω—ã—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞—Ö!\n"
        )
    # –°—Ä–∞–∑—É –≤—ã–≤–æ–¥–∏–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π!
    user_id = message.from_user.id
    user_rent_data[user_id] = {
        "cart": {},
        "start_time": None,
        "awaiting_quantity": False,
        "last_category": None,
        "is_renting": False,
        "phone": None,
        "asked_phone": False,
    }
    keyboard = categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã:", reply_markup=keyboard)

@dp.message(F.text == "/active")
async def active_rents(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    active = []
    now = datetime.now(KALININGRAD_TZ)

    for uid, data in user_rent_data.items():
        if data.get("is_renting"):
            start_time = data.get("start_time")
            if start_time:
                if isinstance(start_time, str):
                    try:
                        start_time = datetime.fromisoformat(start_time)
                    except Exception:
                        start_time = now
                duration = now - start_time
                minutes = int(duration.total_seconds() // 60)
                start_str = start_time.strftime("%H:%M")
            else:
                minutes = "-"
                start_str = "-"
            user_name = data.get("user_name") or "-"
            phone = data.get("phone") or "-"
            cart = data.get("cart", {})
            if cart:
                bikes = "\n".join([f"{cat}: {qty}" for cat, qty in cart.items()])
            else:
                bikes = "-"
            active.append([
                user_name,
                phone,
                bikes,
                start_str,
                minutes
            ])

    if not active:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.")
        return

    # --- PIL —Ä–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã ---
    headers = ["–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–í–µ–ª–æ—Å–∏–ø–µ–¥—ã", "–°—Ç–∞—Ä—Ç", "–î–ª–∏—Ç—Å—è (–º–∏–Ω)"]

    font_path = "shobhika_regular.otf"  # –ø—É—Ç—å –¥–æ TTF-—Ñ–∞–π–ª–∞ —à—Ä–∏—Ñ—Ç–∞
    try:
        font = ImageFont.truetype(font_path, 28)
        font_bold = ImageFont.truetype(font_path, 32)
    except:
        font = ImageFont.load_default()
        font_bold = ImageFont.load_default()

    row_height = 56
    col_widths = [180, 260, 370, 120, 170]  # –ø–æ–¥–≥–æ–Ω–∏ –ø–æ–¥ —Å–≤–æ–π –≤–∫—É—Å

    # –°—á–∏—Ç–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–∞–±–ª–∏—Ü—ã (—É—á–∏—Ç—ã–≤–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ —Å—Ç–æ–ª–±—Ü–µ "–í–µ–ª–æ—Å–∏–ø–µ–¥—ã")
    total_height = row_height * (len(active) + 1)
    for row in active:
        bike_lines = row[2].count('\n')
        if bike_lines:
            total_height += bike_lines * 30  # 30px –Ω–∞ –∫–∞–∂–¥—É—é –¥–æ–ø. —Å—Ç—Ä–æ–∫—É –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞

    total_width = sum(col_widths) + 20

    img = Image.new('RGB', (total_width, total_height + 30), color='#fff')
    draw = ImageDraw.Draw(img)

    # –†–∏—Å—É–µ–º —à–∞–ø–∫—É
    x = 10
    y = 10
    for i, h in enumerate(headers):
        draw.rectangle([x, y, x+col_widths[i], y+row_height], fill="#ffe066", outline="#bdbdbd", width=2)
        draw.text((x+10, y+10), h, font=font_bold, fill="#222")
        x += col_widths[i]
    y += row_height

    # –†–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫–∏
    for idx, row in enumerate(active):
        x = 10
        bike_lines = row[2].split('\n')
        bike_lines_count = len(bike_lines)
        bike_cell_height = row_height + (bike_lines_count-1)*30
        for i, val in enumerate(row):
            # –¶–≤–µ—Ç –ø–æ–ª–æ—Å–∞—Ç—ã–π
            fill = "#f9f9f9" if idx % 2 == 0 else "#eafaf1"
            draw.rectangle([x, y, x+col_widths[i], y+bike_cell_height], fill=fill, outline="#bdbdbd", width=2)
            # –í–µ–ª–æ—Å–∏–ø–µ–¥—ã ‚Äî –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            if i == 2:
                for line_idx, line in enumerate(bike_lines):
                    draw.text((x+10, y+10+line_idx*30), line, font=font, fill="#222")
            else:
                draw.text((x+10, y+10), str(val), font=font, fill="#222")
            x += col_widths[i]
        y += bike_cell_height

    img_path = "active_rents_pil.png"
    img.save(img_path)

    await message.answer_photo(FSInputFile(img_path), caption="üö¥‚Äç‚ôÇÔ∏è –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã")

@dp.message(F.text == "/help")
async def help_cmd(message: types.Message):
    await message.answer(
        "<b>‚ÑπÔ∏è –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É BalticBike:</b>\n"
        "‚Ä¢ <b>/start</b> ‚Äî –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
        "‚Ä¢ <b>/help</b> ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ <b>/myid</b> ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID\n"
        "‚Ä¢ <b>/stats</b> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "‚Ä¢ <b>–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥</b> ‚Äî –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ <b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n"
        "‚Ä¢ –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!"
    )

@dp.message(F.text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç")
async def restart_bot(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if data and data.get("is_renting"):
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞—Ä–µ–Ω–¥—É!")
        return
    user_rent_data[user_id] = {
        "cart": {},
        "start_time": None,
        "awaiting_quantity": False,
        "last_category": None,
        "is_renting": False,
        "phone": None,
        "asked_phone": False,
    }
    keyboard = categories_keyboard()
    await message.answer(
        "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã:",
        reply_markup=keyboard
    )

@dp.message(F.text == "/report")
async def admin_report(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await send_daily_report()
    await message.answer("–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@dp.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    if data and data.get("is_renting"):
        await message.answer(
            SUPPORT_TEXT,
            reply_markup=during_rent_keyboard()
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é)
        await message.answer(
            SUPPORT_TEXT,
            reply_markup=categories_keyboard()
        )

@dp.message(F.text == "‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞—Ç–∞—é—Å—å?")
async def time_spent(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    if data and data.get("is_renting"):
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã
        start_time = data["start_time"]
        end_time = datetime.now(KALININGRAD_TZ)
        duration = end_time - start_time
        minutes = int(duration.total_seconds() // 60)

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ —á–∞—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –º–∏–Ω—É—Ç–∞—Ö
        if minutes < 60:
            time_str = f"{minutes} –º–∏–Ω"
        else:
            hours = minutes // 60
            minutes_left = minutes % 60
            time_str = f"{hours} —á {minutes_left} –º–∏–Ω"

        await message.answer(
            f"‚è± –í—ã –∫–∞—Ç–∞–µ—Ç–µ—Å—å —É–∂–µ {time_str}.",
            reply_markup=during_rent_keyboard()
        )
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞! –í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=main_menu_keyboard()
        )

@dp.message(F.text == "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥")
async def start_rent_button(message: types.Message):
    user_id = message.from_user.id
    user_rent_data[user_id] = {
        "cart": {},
        "start_time": None,
        "awaiting_quantity": False,
        "last_category": None,
        "is_renting": False,
        "phone": None,
        "asked_phone": False,
    }
    keyboard = categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=keyboard)

@dp.message(lambda m: any(m.text and m.text.startswith(bike_categories[cat]['emoji']) for cat in bike_categories))
async def select_category(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_rent_data:
        await start_rent_button(message)
        return
    data = user_rent_data[user_id]
    if data["is_renting"]:
        await message.answer("–ê—Ä–µ–Ω–¥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç.", reply_markup=during_rent_keyboard())
        return

    cat_name = None
    for cat, info in bike_categories.items():
        pattern = f"^{re.escape(info['emoji'])} {cat}"
        if re.match(pattern, message.text):
            cat_name = cat
            break
    if not cat_name:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data["awaiting_quantity"] = True
    data["last_category"] = cat_name

    qty_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=str(qty)) for qty in QUANTITY_CHOICES],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
        ],
        resize_keyboard=True
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å
    img_path = bike_categories[cat_name]["img"]
    if os.path.exists(img_path):
        await message.answer_photo(
            FSInputFile(img_path),
            caption=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {bike_categories[cat_name]['emoji']} <b>{cat_name}</b>\n–¶–µ–Ω–∞: {bike_categories[cat_name]['hour']}‚ÇΩ/—á–∞—Å\n\n–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?",
            reply_markup=qty_keyboard
        )
    else:
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {bike_categories[cat_name]['emoji']} <b>{cat_name}</b>\n–¶–µ–Ω–∞: {bike_categories[cat_name]['hour']}‚ÇΩ/—á–∞—Å\n\n–°–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?",
            reply_markup=qty_keyboard
        )

@dp.message(F.text == "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def back_to_category(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_rent_data:
        user_rent_data[user_id]["awaiting_quantity"] = False
        user_rent_data[user_id]["last_category"] = None
    keyboard = categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.message(lambda m: m.from_user.id in user_rent_data and user_rent_data[m.from_user.id]["awaiting_quantity"])
async def select_quantity(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data[user_id]
    if message.text == "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
        await back_to_category(message)
        return
    try:
        qty = int(message.text)
        if qty not in QUANTITY_CHOICES:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ª—å–∫–æ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ!")
        return
    cat = data["last_category"]
    data["cart"][cat] = data["cart"].get(cat, 0) + qty
    data["awaiting_quantity"] = False
    data["last_category"] = None
    keyboard = categories_keyboard()
    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ {qty} |{cat}| –≤–µ–ª–æ—Å–∏–ø–µ–¥(–∞).\n\n"
        "–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –∏ –Ω–∞–∂–º–∏—Ç–µ <b>¬´–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É¬ª</b>.",
        reply_markup=keyboard
    )

@dp.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if not data or not data["cart"]:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –¥–ª—è –∞—Ä–µ–Ω–¥—ã.", reply_markup=categories_keyboard())
        return
    cart_str = "\n".join([
        f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)"
        for cat, cnt in data["cart"].items()
    ])
    total_hour_price = sum([bike_categories[cat]['hour'] * cnt for cat, cnt in data["cart"].items()])
    await message.answer(
        f"–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n{cart_str}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 —á–∞—Å: {total_hour_price}‚ÇΩ</b>",
        reply_markup=cart_keyboard()
    )

@dp.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_rent_data:
        user_rent_data[user_id]["cart"] = {}
        user_rent_data[user_id]["is_renting"] = False
        user_rent_data[user_id]["start_time"] = None
    keyboard = categories_keyboard()
    await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã —Å–Ω–æ–≤–∞.", reply_markup=keyboard)


@dp.message(F.text == "–ù–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É üö¥üö¥üö¥...")
async def start_rent_preview(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    if not data or not data["cart"]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–µ–ª–æ—Å–∏–ø–µ–¥.")
        return

    cart_str = "\n".join([
        f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)"
        for cat, cnt in data["cart"].items()
    ])
    total_hour_price = sum([bike_categories[cat]['hour'] * cnt for cat, cnt in data["cart"].items()])

    await message.answer(
        "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–µ—Ö–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "- –¢–æ—Ä–º–æ–∑–∞ –∏ —à–∏–Ω—ã.\n"
        "- –°–∏–¥–µ–Ω—å–µ –ø–æ–¥ –≤–∞—à —Ä–æ—Å—Ç.\n\n"
        "<b><u>–¢–µ–ø–µ—Ä—å —Å–æ–±–ª—é–¥–∞–π—Ç–µ —ç—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</u></b>\n"
        "- <b>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!</b> –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–æ—Ä–æ–≥–æ–π.\n"
        "- <b>–ù–µ –≥–æ–Ω–∏—Ç–µ!</b> –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø–æ–µ–∑–¥–∫–æ–π.\n"
        "- <b>–ù–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥.</b> –£–¥–æ–±—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ.\n"
        "- <b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ –Ω–∞ –ø–æ–¥—ä—ë–º–∞—Ö –∏ —Å–ø—É—Å–∫–∞—Ö.</b> –î–æ—Ä–æ–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ä–æ–≤–Ω—ã–º–∏.\n"
        "- <b>–ë–µ—Ä–µ–≥–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥.</b> –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –µ–≥–æ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n\n"
    )

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n{cart_str}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"<b>üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 —á–∞—Å: {total_hour_price} —Ä—É–±.</b>\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=contact_keyboard()
    )
    data["asked_phone"] = True


@dp.callback_query(F.data == "back_to_cart")
async def back_to_cart(callback: types.CallbackQuery):
    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä–µ–Ω–¥—É" –∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É"
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å–Ω–æ–≤–∞
    user_id = callback.from_user.id
    data = user_rent_data.get(user_id)

    if not data or not data["cart"]:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –¥–ª—è –∞—Ä–µ–Ω–¥—ã.", reply_markup=categories_keyboard())
        return

    cart_str = "\n".join([f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)" for cat, cnt in data["cart"].items()])
    total_hour_price = sum([bike_categories[cat]['hour'] * cnt for cat, cnt in data["cart"].items()])

    await callback.message.answer(
        f"–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n{cart_str}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 —á–∞—Å: {total_hour_price}‚ÇΩ</b>",
        reply_markup=cart_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ—Ä–∑–∏–Ω—ã
    )

@dp.message(lambda m: m.contact is not None)
async def handle_contact(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    if not data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ /start.")
        return

    phone = message.contact.phone_number
    data["phone"] = phone
    data["asked_phone"] = False

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –û—Ñ–æ—Ä–º–ª—è–µ–º –∞—Ä–µ–Ω–¥—É‚Ä¶")
    try:
        await start_rent_real(message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—Ä–µ–Ω–¥—ã: {e}")
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—Ä–µ–Ω–¥—ã:", e)
async def start_rent_real(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data[user_id]
    data["start_time"] = datetime.now(KALININGRAD_TZ)
    data["is_renting"] = True
    keyboard = during_rent_keyboard()
    cart_str = "\n".join([
        f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)"
        for cat, cnt in data["cart"].items()
    ])

    total_hour_price = sum([bike_categories[cat]['hour'] * qty for cat, qty in data["cart"].items()])

    try:
        await bot.send_message(
            ADMIN_ID,
            f"–ù–ê–ß–ê–õ–ê–°–¨ –ê–†–ï–ù–î–ê!\n"
            f"User: {message.from_user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone'] if data['phone'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"id: {message.from_user.id}\n"
            f"–í—Ä–µ–º—è: {datetime.now(KALININGRAD_TZ).strftime('%H:%M')}\n"
            f"–ö–æ—Ä–∑–∏–Ω–∞:\n{cart_str}"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–Ω–∞—á–∞–ª–æ): {e}")

    await message.answer(
        f"–í—ã –∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏:\n{cart_str}\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"<b>üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –∑–∞ 1 —á–∞—Å: {total_hour_price} —Ä—É–±.</b>\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∫–∞—Ç–∞—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É'.",
        reply_markup=keyboard
    )

@dp.message(F.text == "üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É")
async def finish_rent(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if not data or not data["is_renting"]:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏ –∞—Ä–µ–Ω–¥—É. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –∏ –Ω–∞—á–Ω–∏—Ç–µ –∞—Ä–µ–Ω–¥—É.")
        return

    end_time = datetime.now(KALININGRAD_TZ)
    start_time = data["start_time"]
    duration = end_time - start_time
    minutes = int(duration.total_seconds() // 60)

    # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
    remainder = minutes % 15
    if remainder < 8:
        rounded_minutes = (minutes // 15) * 15
    else:
        rounded_minutes = ((minutes // 15) + 1) * 15
    if rounded_minutes == 0:
        rounded_minutes = 15  # –õ—é–±–∞—è –ø–æ–µ–∑–¥–∫–∞ (–¥–∞–∂–µ 1 –º–∏–Ω—É—Ç–∞) —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ 15 –º–∏–Ω—É—Ç

    start_str = start_time.strftime("%H:%M")
    end_str = end_time.strftime("%H:%M")
    hours_part = rounded_minutes // 60
    minutes_part = rounded_minutes % 60
    if hours_part > 0:
        ride_time = f"{hours_part} —á {minutes_part} –º–∏–Ω"
    else:
        ride_time = f"{minutes_part} –º–∏–Ω"
    period_str = f"{date.today().isoformat()} {start_str} ‚Äî {end_str}"

    total_price = 0
    lines = []
    for cat, qty in data["cart"].items():
        hour_price = bike_categories[cat]["hour"]
        emoji = bike_categories[cat]['emoji']
        minute_price = hour_price / 60
        price = int(minute_price * rounded_minutes)
        line = f"{emoji} <b>{cat}</b>: {qty} —à—Ç. √ó {rounded_minutes} –º–∏–Ω √ó {minute_price:.2f}‚ÇΩ = {price * qty}‚ÇΩ"
        lines.append(line)
        total_price += price * qty

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    try:
        await bot.send_message(
            ADMIN_ID,
            f"–ó–ê–í–ï–†–®–ï–ù–ê –ê–†–ï–ù–î–ê!\n"
            f"User: {message.from_user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone'] if data.get('phone') else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"id: {message.from_user.id}\n"
            f"–í—Ä–µ–º—è: {start_str} ‚Äî {end_str} ({ride_time})\n"
            f"–ö–æ—Ä–∑–∏–Ω–∞: {data['cart']}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±."
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–∫–æ–Ω–µ—Ü): {e}")

    # --- –í–æ—Ç –¢–£–¢ –≥–ª–∞–≤–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤:
    save_rent_to_gsheet({
        "user_id": message.from_user.id,
        "user_name": message.from_user.full_name,
        "phone": data.get("phone"),
        "cart": data.get("cart"),
    }, rounded_minutes, total_price, period_str)
    # ---

    # –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã, –Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω (—á—Ç–æ–±—ã –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∞—Ä–µ–Ω–¥–µ)
    user_rent_data[user_id] = {
        "cart": {},
        "start_time": None,
        "awaiting_quantity": False,
        "last_category": None,
        "is_renting": False,
        "phone": data.get("phone"),
        "asked_phone": False,
    }

    keyboard = categories_keyboard()
    await message.answer(
        f"‚è∞ <b>–í—ã –∫–∞—Ç–∞–ª–∏—Å—å {ride_time} –Ω–∞:</b>\n"
        + "\n".join(lines) +
        "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        f"\n<b>üêù –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <u>{total_price} —Ä—É–±.</u></b>\n\n"
        "<b>üí∏ –û–ø–ª–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã –ø–æ –°–ë–ü</b>\n"
        "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "\n<b>üí≥ <a href='tel:+79062112940'><code>+7 906 211-29-40</code></a></b>\n"
        "\n<b>üë§ –í–∏—Ç–∞–ª–∏–π –ê.–ì.</b> <i>–°–±–µ—Ä–±–∞–Ω–∫</i>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å</i>\n"
        "<i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞–∂–∏—Ç–µ —á–µ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.</i>\n\n"
        "<b>üö¥ –•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥ —Å–Ω–æ–≤–∞?</b> –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ üëá",
        reply_markup=keyboard,
        disable_web_page_preview=True  # —á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∞ –≤—ã–≥–ª—è–¥–µ–ª–∞ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
    )

@dp.message(F.text == "/stats")
async def stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        with open("rents.csv", encoding="utf-8") as f:
            reader = list(csv.DictReader(f))
    except FileNotFoundError:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∫–∞—Ç–∞—Ö.")
        return

    total_rents = len(reader)
    bikes_counter = Counter()
    total_income = 0
    total_minutes = 0

    for row in reader:
        try:
            cart = json.loads(row["cart"])
        except Exception:
            cart = {}
        for cat, qty in cart.items():
            bikes_counter[cat] += int(qty)
        total_income += int(row.get("total_price", 0))
        total_minutes += int(row.get("minutes", 0))

    total_bikes = sum(bikes_counter.values())
    most_popular = bikes_counter.most_common(1)
    popular_bike = most_popular[0][0] if most_popular else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    avg_minutes = total_minutes // total_rents if total_rents else 0

    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫–∞—Ç–∞</b>\n"
        f"–í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ–∫–∞—Ç–æ–≤: <b>{total_rents}</b>\n"
        f"–í—Å–µ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –≤–∑—è—Ç–æ: <b>{total_bikes}</b>\n"
        f"–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–µ–ª–∏–∫: <b>{popular_bike}</b>\n"
        f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_income} —Ä—É–±.</b>\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: <b>{avg_minutes} –º–∏–Ω</b>"
    )


    
# --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã, –µ—Å–ª–∏ –∞—Ä–µ–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ --- #
@dp.message(lambda m: m.from_user.id in user_rent_data and user_rent_data[m.from_user.id].get("is_renting"))
async def status_time_active(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if data and data.get("is_renting"):
        duration = datetime.now(KALININGRAD_TZ) - data["start_time"]
        minutes = int(duration.total_seconds() // 60)
        await message.answer(
            f"‚è± –°–µ–π—á–∞—Å –≤–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —É–∂–µ {minutes} –º–∏–Ω.\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∫–∞—Ç–∞—Ç—å—Å—è.",
            reply_markup=during_rent_keyboard()
        )

# --- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç --- #
@dp.message()
async def fallback(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëá\n"
        "–¢–∞–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–π–¥—ë—Ç –±—ã—Å—Ç—Ä–µ–µ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫!"
    )

# -------- –ó–∞–ø—É—Å–∫ -------- #
async def send_daily_report():
    try:
        with open("rents.csv", encoding="utf-8") as f:
            reader = list(csv.DictReader(f))
    except FileNotFoundError:
        await bot.send_message(ADMIN_ID, "–ó–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∫–∞—Ç–∞—Ö.")
        return

    today = date.today().isoformat()
    today_rents = [row for row in reader if today in row["period"]]

    if not today_rents:
        await bot.send_message(ADMIN_ID, "–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∫–∞—Ç–æ–≤ –Ω–µ –±—ã–ª–æ.")
        return

    bikes_counter = Counter()
    total_income = 0
    total_minutes = 0
    total_bikes = 0

    for row in today_rents:
        cart = json.loads(row["cart"])
        for cat, qty in cart.items():
            bikes_counter[cat] += int(qty)
            total_bikes += int(qty)
        total_income += int(row["total_price"])
        total_minutes += int(row["minutes"])

    most_popular = bikes_counter.most_common(1)
    popular_bike = most_popular[0][0] if most_popular else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    avg_minutes = total_minutes // len(today_rents) if today_rents else 0

    text = (
        f"üìÖ <b>–û—Ç—á—ë—Ç –∑–∞ {today}</b>\n"
        f"–ü—Ä–æ–∫–∞—Ç–æ–≤: <b>{len(today_rents)}</b>\n"
        f"–í—Å–µ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –≤—ã–¥–∞–ª–∏: <b>{total_bikes}</b>\n"
        f"–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–µ–ª–∏–∫: <b>{popular_bike}</b>\n"
        f"–í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å: <b>{total_income} —Ä—É–±.</b>\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: <b>{avg_minutes} –º–∏–Ω</b>"
    )
    await bot.send_message(ADMIN_ID, text)

async def main():
    await dp.start_polling(bot)
    
if __name__ == "__main__":
    asyncio.run(main())

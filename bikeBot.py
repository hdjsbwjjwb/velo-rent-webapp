import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile
from datetime import datetime, date
import json
import pytz
import os
import re
import csv
import pandas as pd
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
from collections import Counter

from dotenv import load_dotenv
load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
TOKEN = os.getenv("BOT_TOKEN")  # –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")

import gspread
from oauth2client.service_account import ServiceAccountCredentials


import traceback

from aiologger import Logger
import sys
from datetime import date
async def generate_stats_chart(records, filename='stats_chart.png'):
    from collections import Counter
    import matplotlib.pyplot as plt
    import json

    bikes_counter = Counter()
    total_income = 0
    total_minutes = 0

    for row in records:
        cart_json = row.get("cart") or row.get("–í–µ–ª–æ—Å–∏–ø–µ–¥—ã") or "{}"
        cart = json.loads(cart_json)
        for cat, qty in cart.items():
            bikes_counter[cat] += int(qty)

        sum_str = str(row.get("total_price", 0) or row.get("–°—É–º–º–∞", "0")).replace("‚ÇΩ", "").replace(" ", "").strip()
        try:
            total_income += int(sum_str)
        except Exception:
            pass

        total_minutes += int(row.get("minutes", 0) or row.get("–í—Ä–µ–º—è –ø—Ä–æ–∫–∞—Ç–∞", 0))

    if records:
        avg_minutes = total_minutes // len(records)
    else:
        avg_minutes = 0

    plt.figure(figsize=(12, 6))
    # --- –≥—Ä–∞—Ñ–∏–∫ 1 ---
    plt.subplot(1, 2, 1)
    bars1 = plt.bar(bikes_counter.keys(), bikes_counter.values(), color='skyblue')
    plt.title('–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–µ–Ω–¥')
    for bar in bars1:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width() / 2, height, f"{int(height)}", ha='center', va='bottom', fontsize=12, fontweight='bold')

    # --- –≥—Ä–∞—Ñ–∏–∫ 2 ---
    plt.subplot(1, 2, 2)
    bars2 = plt.bar(['–í—ã—Ä—É—á–∫–∞', '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã (–º–∏–Ω)'], [total_income, avg_minutes], color=['lightgreen', 'salmon'])
    plt.title('–í—ã—Ä—É—á–∫–∞ –∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è')
    for bar, value in zip(bars2, [total_income, avg_minutes]):
        plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), f"{value:,}".replace(',', ' '), ha='center', va='bottom', fontsize=12, fontweight='bold')

    plt.tight_layout()
    plt.savefig(filename)
    plt.close()



logger = Logger.with_default_handlers(name='bike_bot', level='INFO')

async def save_rent_to_gsheet(data, duration_min, total_price, period_str):
    #await logger.info("save_rent_to_gsheet –≤—ã–∑–≤–∞–Ω–∞")
    try:
        scope = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/spreadsheets",
            "https://www.googleapis.com/auth/drive"
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_ID")).sheet1
        
        cart_human = "\n".join([f"{cat} ‚Äî {qty}" for cat, qty in data.get("cart", {}).items()])
        
        sheet.append_row([
            data.get("user_id"),
            data.get("user_name"),
            data.get("phone"),
            json.dumps(data.get("cart"), ensure_ascii=False),
            cart_human,
            duration_min,
            total_price,
            period_str
        ])
        #await logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ Google –¢–∞–±–ª–∏—Ü—É")
    except Exception as e:
        await logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google —Ç–∞–±–ª–∏—Ü—É: {e}")
        traceback.print_exc()
        with open("gspread_error.log", "a") as f:
            f.write(f"{datetime.now()} ‚Äî –û—à–∏–±–∫–∞:\n")
            traceback.print_exc(file=f)

def get_gsheet_records():
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key(os.getenv("GOOGLE_SHEET_ID")).sheet1
    records = sheet.get_all_records()
    return records

ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
    
SUPPORT_TEXT = (
    "üí¨ <b>üìû   BalticBike</b>\n\n"
    "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã:\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: <a href='tel:+79992552854'>+7 999 255-28-54</a>\n"
    "Telegram: @realBalticBike\n"
    "E-mail: velo.prokat@internet.ru"
)

PHONE_NUMBER = "+7 906 211-29-40"  # <-- –Ω–æ–º–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã

bike_categories = {
    '–î–µ—Ç—Å–∫–∏–π':     {"hour": 150, "emoji": "üßí", "img": "images/Baby.jpg"},
    '–ü—Ä–æ–≥—É–ª–æ—á–Ω—ã–π': {"hour": 200, "emoji": "üö≤", "img": "images/City.jpg"},
    '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π':  {"hour": 250, "emoji": "üöµ", "img": "images/Sport.jpg"},
}

QUANTITY_CHOICES = [1, 2, 3, 4, 5]
user_rent_data = {}
KALININGRAD_TZ = pytz.timezone('Europe/Kaliningrad')

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

async def set_user_commands(bot):
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="–ü–æ–º–æ—â—å")
    ]
    await bot.set_my_commands(commands, scope=types.BotCommandScopeDefault())

async def set_admin_commands(bot, admin_id):
    commands = [
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
        types.BotCommand(command="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.BotCommand(command="report", description="–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"),
        types.BotCommand(command="active", description="–ê–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã"),
        # –¥—Ä—É–≥–∏–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    ]
    scope = types.BotCommandScopeChat(chat_id=admin_id)
    await bot.set_my_commands(commands, scope=scope)

# -------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã -------- #

def main_menu_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[ 
            [types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞" –æ—Å—Ç–∞—ë—Ç—Å—è
        ],
        resize_keyboard=True
    )

def categories_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=f"{bike_categories[cat]['emoji']} {cat} ({bike_categories[cat]['hour']}‚ÇΩ/—á)")]
            for cat in bike_categories
        ] + [[types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")], [types.KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]],
        resize_keyboard=True
    )

def cart_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")]
        ],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã
def during_rent_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
           # [types.KeyboardButton(text="üó∫ –ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?")],
            [types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            [types.KeyboardButton(text="‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞—Ç–∞—é—Å—å?")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
            [types.KeyboardButton(text="üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
        ],
        resize_keyboard=True
    )

def contact_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚úÖ –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ ‚úÖ", request_contact=True)]],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
def review_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")]
        ],
        resize_keyboard=True
    )
# -------- Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã -------- #


# -------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ -------- #

@dp.message(F.text == "/start")
async def greet(message: types.Message):
    user_id = message.from_user.id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_rent_data[user_id] = {
        "cart": {},
        "start_time": None,
        "is_renting": False,
        "phone": None,
        "awaiting_bike_selection": False,
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ welcome.png
    try:
        photo = FSInputFile("welcome.png")
        await message.answer_photo(
            photo,
            caption=(
                "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–µ—Ö–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
                "- –¢–æ—Ä–º–æ–∑–∞ –∏ —à–∏–Ω—ã.\n"
                "- –°–∏–¥–µ–Ω—å–µ –ø–æ–¥ –≤–∞—à —Ä–æ—Å—Ç.\n\n"
                "<b><u>–¢–µ–ø–µ—Ä—å —Å–æ–±–ª—é–¥–∞–π—Ç–µ —ç—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</u></b>\n"
                "- <b>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!</b> –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–æ—Ä–æ–≥–æ–π.\n"
                "- <b>–ù–µ –≥–æ–Ω–∏—Ç–µ!</b> –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø–æ–µ–∑–¥–∫–æ–π.\n"
                "- <b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ –Ω–∞ –ø–æ–¥—ä—ë–º–∞—Ö –∏ —Å–ø—É—Å–∫–∞—Ö.</b> –î–æ—Ä–æ–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ä–æ–≤–Ω—ã–º–∏.\n"
                "- <b>–ë–µ—Ä–µ–≥–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥.</b> –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –µ–≥–æ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n\n"
            )
        )
    except:
        await message.answer(
            "–ü—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–µ—Ö–∞—Ç—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            "- –¢–æ—Ä–º–æ–∑–∞ –∏ —à–∏–Ω—ã.\n"
            "- –°–∏–¥–µ–Ω—å–µ –ø–æ–¥ –≤–∞—à —Ä–æ—Å—Ç.\n\n"
            "<b><u>–¢–µ–ø–µ—Ä—å —Å–æ–±–ª—é–¥–∞–π—Ç–µ —ç—Ç–∏ –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</u></b>\n"
            "- <b>–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!</b> –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–æ—Ä–æ–≥–æ–π.\n"
            "- <b>–ù–µ –≥–æ–Ω–∏—Ç–µ!</b> –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø–æ–µ–∑–¥–∫–æ–π.\n"
            "- <b>–û—Å—Ç–æ—Ä–æ–∂–Ω–æ –Ω–∞ –ø–æ–¥—ä—ë–º–∞—Ö –∏ —Å–ø—É—Å–∫–∞—Ö.</b> –î–æ—Ä–æ–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Ä–æ–≤–Ω—ã–º–∏.\n"
            "- <b>–ë–µ—Ä–µ–≥–∏—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥.</b> –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ –µ–≥–æ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n\n"
        )

    # –ö–Ω–æ–ø–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –∏ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –∏ –Ω–∞—á–∞—Ç—å –∞—Ä–µ–Ω–¥—É:",
        reply_markup=contact_keyboard()
    )

@dp.message(F.text == "/active")
async def active_rents(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    active = []
    now = datetime.now(KALININGRAD_TZ)

    for uid, data in user_rent_data.items():
        if data.get("is_renting"):
            start_time = data.get("start_time")
            if start_time:
                if isinstance(start_time, str):
                    try:
                        start_time = datetime.fromisoformat(start_time)
                    except Exception:
                        start_time = now
                duration = now - start_time
                minutes = int(duration.total_seconds() // 60)
                start_str = start_time.strftime("%H:%M")
            else:
                minutes = "-"
                start_str = "-"
            user_name = data.get("user_name") or "-"
            phone = data.get("phone") or "-"
            cart = data.get("cart", {})
            if cart:
                bikes = "\n".join([f"{cat}: {qty}" for cat, qty in cart.items()])
            else:
                bikes = "-"
            active.append([
                user_name,
                phone,
                bikes,
                start_str,
                minutes
            ])

    if not active:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.")
        return

    # --- PIL —Ä–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã ---
    headers = ["–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "–í–µ–ª–æ—Å–∏–ø–µ–¥—ã", "–°—Ç–∞—Ä—Ç", "–í—Ä–µ–º—è"]

    font_path = "shobhika_regular.otf"  # –ø—É—Ç—å –¥–æ TTF-—Ñ–∞–π–ª–∞ —à—Ä–∏—Ñ—Ç–∞
    try:
        font = ImageFont.truetype(font_path, 28)
        font_bold = ImageFont.truetype(font_path, 32)
    except:
        font = ImageFont.load_default()
        font_bold = ImageFont.load_default()

    row_height = 56
    col_widths = [180, 260, 370, 120, 170]  # –ø–æ–¥–≥–æ–Ω–∏ –ø–æ–¥ —Å–≤–æ–π –≤–∫—É—Å

    # –°—á–∏—Ç–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–∞–±–ª–∏—Ü—ã (—É—á–∏—Ç—ã–≤–∞—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ —Å—Ç–æ–ª–±—Ü–µ "–í–µ–ª–æ—Å–∏–ø–µ–¥—ã")
    total_height = row_height * (len(active) + 1)
    for row in active:
        bike_lines = row[2].count('\n')
        if bike_lines:
            total_height += bike_lines * 30  # 30px –Ω–∞ –∫–∞–∂–¥—É—é –¥–æ–ø. —Å—Ç—Ä–æ–∫—É –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞

    total_width = sum(col_widths) + 20

    img = Image.new('RGB', (total_width, total_height + 30), color='#fff')
    draw = ImageDraw.Draw(img)

    # –†–∏—Å—É–µ–º —à–∞–ø–∫—É
    x = 10
    y = 10
    for i, h in enumerate(headers):
        draw.rectangle([x, y, x+col_widths[i], y+row_height], fill="#ffe066", outline="#bdbdbd", width=2)
        draw.text((x+10, y+10), h, font=font_bold, fill="#222")
        x += col_widths[i]
    y += row_height

    # –†–∏—Å—É–µ–º —Å—Ç—Ä–æ–∫–∏
    for idx, row in enumerate(active):
        x = 10
        bike_lines = row[2].split('\n')
        bike_lines_count = len(bike_lines)
        bike_cell_height = row_height + (bike_lines_count-1)*30
        for i, val in enumerate(row):
            # –¶–≤–µ—Ç –ø–æ–ª–æ—Å–∞—Ç—ã–π
            fill = "#f9f9f9" if idx % 2 == 0 else "#eafaf1"
            draw.rectangle([x, y, x+col_widths[i], y+bike_cell_height], fill=fill, outline="#bdbdbd", width=2)
            # –í–µ–ª–æ—Å–∏–ø–µ–¥—ã ‚Äî –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            if i == 2:
                for line_idx, line in enumerate(bike_lines):
                    draw.text((x+10, y+10+line_idx*30), line, font=font, fill="#222")
            else:
                draw.text((x+10, y+10), str(val), font=font, fill="#222")
            x += col_widths[i]
        y += bike_cell_height

    img_path = "active_rents_pil.png"
    img.save(img_path)

    await message.answer_photo(FSInputFile(img_path), caption="üö¥‚Äç‚ôÇÔ∏è –¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã")

@dp.message(F.text == "/help")
async def help_cmd(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_ID:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await message.answer(
            "<b>‚ÑπÔ∏è –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É BalticBike:</b>\n"
            "‚Ä¢ <b>/start</b> ‚Äî –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
            "‚Ä¢ <b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n"
        )
    else:
        # –î–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        await message.answer(
            "<b>‚ÑπÔ∏è –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±–æ—Ç—É BalticBike:</b>\n"
            "‚Ä¢ <b>/start</b> ‚Äî –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞\n"
            "‚Ä¢ <b>/help</b> ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ <b>/myid</b> ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID\n"
            "‚Ä¢ <b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> ‚Äî —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n"
        )
        
@dp.message(F.text == "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç")
async def restart_bot(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if data and data.get("is_renting"):
        await message.answer("‚ùó –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞—Ä–µ–Ω–¥—É!")
        return
    user_rent_data[user_id] = {
        "cart": {},
        "start_time": None,
        "awaiting_quantity": False,
        "last_category": None,
        "is_renting": False,
        "phone": None,
        "asked_phone": False,
    }
    keyboard = categories_keyboard()
    await message.answer(
        "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã:",
        reply_markup=keyboard
    )

@dp.message(F.text == "/report")
async def admin_report(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    def get_period(row):
        return row.get("period") or row.get("–ü–µ—Ä–∏–æ–¥") or ""

    IGNORE_PHONES = ["7993734285"]  # —Ç–≤–æ–π –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç

    today = date.today().isoformat()  # '2025-06-09'
    records = get_gsheet_records()

    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–æ–¥–∏–º today –∏ –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã
    #await logger.info(f"TODAY: {today}")
    for row in records:
        period = get_period(row)
        included = today in period
        #await logger.info(f"PERIOD: {period}")
        #await logger.info(f"INCLUDED: {included}")

    today_rents = [
        row for row in records
        if today in get_period(row) and str(row.get("phone") or row.get("–¢–µ–ª–µ—Ñ–æ–Ω") or "") not in IGNORE_PHONES
    ]

    if not today_rents:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∫–∞—Ç–æ–≤ –Ω–µ –±—ã–ª–æ.")
        return
    #await logger.info("TODAY_RENTS:\n" + "\n".join(str(r) for r in today_rents))

    await generate_stats_chart(today_rents, filename='daily_stats.png')
    await message.answer_photo(
        FSInputFile('daily_stats.png'),
        caption=f"üìä –û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today})"
    )


@dp.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    if data and data.get("is_renting"):
        await message.answer(
            SUPPORT_TEXT,
            reply_markup=during_rent_keyboard()
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é)
        await message.answer(
            SUPPORT_TEXT,
            reply_markup=categories_keyboard()
        )

@dp.message(F.text == "‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞—Ç–∞—é—Å—å?")
async def time_spent(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    if data and data.get("is_renting"):
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã
        start_time = data["start_time"]
        end_time = datetime.now(KALININGRAD_TZ)
        duration = end_time - start_time
        minutes = int(duration.total_seconds() // 60)

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ —á–∞—Å–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –º–∏–Ω—É—Ç–∞—Ö
        if minutes < 60:
            time_str = f"{minutes} –º–∏–Ω"
        else:
            hours = minutes // 60
            minutes_left = minutes % 60
            time_str = f"{hours} —á {minutes_left} –º–∏–Ω"

        await message.answer(
            f"‚è± –í—ã –∫–∞—Ç–∞–µ—Ç–µ—Å—å —É–∂–µ {time_str}.",
            reply_markup=during_rent_keyboard()
        )
    else:
        await message.answer(
            "–û—à–∏–±–∫–∞! –í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=main_menu_keyboard()
        )

@dp.message(F.text == "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥")
async def start_rent_button(message: types.Message):
    user_id = message.from_user.id
    user_rent_data[user_id] = {
        "cart": {},
        "start_time": None,
        "awaiting_quantity": False,
        "last_category": None,
        "is_renting": False,
        "phone": None,
        "asked_phone": False,
    }
    keyboard = categories_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=keyboard)

# 2. –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
@dp.message(lambda m: m.text and any(m.text.startswith(info["emoji"]) for info in bike_categories.values()))
async def select_category(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id, {})

    if not (data.get("is_renting") and data.get("awaiting_bike_selection")):
        return

    if data.get("awaiting_quantity"):
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    cat_name = next(
        (cat for cat,info in bike_categories.items() if message.text.startswith(info["emoji"])),
        None
    )
    if not cat_name:
        return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")

    data["last_category"]   = cat_name
    data["awaiting_quantity"] = True

    # –í–æ—Ç –Ω–æ–≤–∞—è –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ ¬´–ù–∞–∑–∞–¥¬ª
    qty_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text=str(q)) for q in QUANTITY_CHOICES],
            [types.KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        f"–°–∫–æ–ª—å–∫–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{cat_name}</b> –≤—ã —Å–¥–∞—ë—Ç–µ?",
        parse_mode="HTML",
        reply_markup=qty_keyboard
    )

@dp.message(F.text == "–ì–æ—Ç–æ–≤–æ")
async def finish_rent_finalize(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä–µ–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Å–¥–∞—á–∏
    if not data or not data.get("is_renting") or not data.get("awaiting_bike_selection"):
        await message.answer("–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç–µ –∞—Ä–µ–Ω–¥—É –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å–¥–∞—á–∏
    data["awaiting_bike_selection"] = False

    # –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏
    end_time = datetime.now(KALININGRAD_TZ)
    start_time = data["start_time"]
    duration = end_time - start_time
    total_minutes = int(duration.total_seconds() / 60)

    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 15 –º–∏–Ω—É—Ç
    pay_minutes = max(15, round(total_minutes / 15) * 15)

    # –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    total_price = 0
    cart_lines = []
    for cat, qty in data["cart"].items():
        hour_price = bike_categories[cat]["hour"]
        item_price = int(hour_price / 60 * pay_minutes * qty)
        total_price += item_price
        cart_lines.append(f"‚Ä¢ <b>{cat}</b>: {qty} —à—Ç. ({hour_price}‚ÇΩ/—á)")

    cart_str = "\n".join(cart_lines)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"<b>–ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
        f"<b>–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</b> <u>{total_minutes} –º–∏–Ω</u>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"{cart_str}\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üí∞ <b>–ò—Ç–æ–≥–æ:</b> <u>{total_price} —Ä—É–±.</u>\n"
        "<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–µ–∑–¥–∫—É! üòä</i>",
        parse_mode="HTML"
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await bot.send_message(
        ADMIN_ID,
        (
            "–ó–ê–í–ï–†–®–ï–ù–ê –ê–†–ï–ù–î–ê!\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone') or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–í—Ä–µ–º—è: {start_time.strftime('%H:%M')} ‚Äî {end_time.strftime('%H:%M')} ({total_minutes} –º–∏–Ω)\n"
            f"–ö–æ—Ä–∑–∏–Ω–∞: {data['cart']}\n"
            f"–°—É–º–º–∞: {total_price} ‚ÇΩ"
        )
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # await save_rent_to_gsheet(...)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_rent_data[user_id] = {
        "cart": {},
        "start_time": None,
        "is_renting": False,
        "phone": data.get("phone"),
        "awaiting_bike_selection": False,
    }

    # –í–º–µ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤¬ª
    await message.answer(
        "–ì–æ—Ç–æ–≤–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–µ–∑–¥–∫—É üòä\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤:",
        reply_markup=review_keyboard()
    )

# 3. –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(lambda m: m.text and m.text.isdigit()
                    and user_rent_data.get(m.from_user.id, {}).get("awaiting_quantity"))
async def select_quantity(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data[user_id]

    qty = int(message.text)
    cat = data["last_category"]

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
    data["cart"][cat] = data["cart"].get(cat, 0) + qty

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    data["awaiting_quantity"] = False
    data["last_category"] = None

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ {qty} √ó <b>{cat}</b> (–≤ –∫–æ—Ä–∑–∏–Ω–µ: {data['cart'][cat]})\n\n"
        "–ï—Å–ª–∏ –µ—â—ë —Å–¥–∞—ë—Ç–µ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏–Ω–∞—á–µ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
        parse_mode="HTML",
        reply_markup=categories_keyboard()
    )


@dp.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def view_cart(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    # –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞
    if not data or not data.get("cart"):
        await message.answer(
            "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –¥–ª—è –∞—Ä–µ–Ω–¥—ã.",
            reply_markup=categories_keyboard()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ—Ä–∑–∏–Ω—ã
    cart_str = "\n".join([
        f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)"
        for cat, cnt in data["cart"].items()
    ])
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 —á–∞—Å
    total_hour_price = sum(bike_categories[cat]['hour'] * cnt for cat, cnt in data["cart"].items())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π cart_keyboard()
    await message.answer(
        f"–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n{cart_str}\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 —á–∞—Å: {total_hour_price}‚ÇΩ</b>",
        parse_mode="HTML",
        reply_markup=cart_keyboard()
    )


@dp.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    if not data or not data.get("is_renting"):
        await message.answer("–ê—Ä–µ–Ω–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    data["cart"] = {}
    await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–Ω–æ–≤–∞.", reply_markup=categories_keyboard())


@dp.callback_query(F.data == "back_to_cart")
async def back_to_cart(callback: types.CallbackQuery):
    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä–µ–Ω–¥—É" –∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É"
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å–Ω–æ–≤–∞
    user_id = callback.from_user.id
    data = user_rent_data.get(user_id)

    if not data or not data["cart"]:
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –¥–ª—è –∞—Ä–µ–Ω–¥—ã.", reply_markup=categories_keyboard())
        return

    cart_str = "\n".join([f"{bike_categories[cat]['emoji']} <b>{cat}</b>: {cnt} —à—Ç. ({bike_categories[cat]['hour']}‚ÇΩ/—á)" for cat, cnt in data["cart"].items()])
    total_hour_price = sum([bike_categories[cat]['hour'] * cnt for cat, cnt in data["cart"].items()])

    await callback.message.answer(
        f"–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:\n{cart_str}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1 —á–∞—Å: {total_hour_price}‚ÇΩ</b>",
        reply_markup=cart_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ—Ä–∑–∏–Ω—ã
    )

@dp.message(lambda m: m.contact is not None)
async def handle_contact(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    if not data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    phone = message.contact.phone_number
    data["phone"] = phone
    data["asked_phone"] = False


    # —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞—Ä–µ–Ω–¥—É (–±–µ–∑ –∫–æ—Ä–∑–∏–Ω—ã)
    await start_rent_real(message)

async def start_rent_real(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data[user_id]
    data["start_time"] = datetime.now(KALININGRAD_TZ)
    data["is_renting"] = True
    keyboard = during_rent_keyboard()

    await message.answer(
        f"<b>–ê—Ä–µ–Ω–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å!</b>\n"
        f"<b>–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞:</b> <u>{data['start_time'].strftime('%H:%M')}</u>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "–•–æ—Ä–æ—à–µ–π –ø–æ–µ–∑–¥–∫–∏! üö¥‚Äç‚ôÇÔ∏è",
        reply_markup=keyboard
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(
            ADMIN_ID,
            f"–ù–ê–ß–ê–õ–ê–°–¨ –ê–†–ï–ù–î–ê!\n"
            f"User: {message.from_user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone'] if data['phone'] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"id: {message.from_user.id}\n"
            f"–í—Ä–µ–º—è: {data['start_time'].strftime('%H:%M')}\n"
            f"–í–µ–ª–æ—Å–∏–ø–µ–¥—ã –ø–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω—ã."
        )
    except:
        pass

@dp.message(F.text == "üó∫ –ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?")
async def interesting_places(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    if data and data.get("is_renting"):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä–µ–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç
        route = "–í–∞—à –º–∞—Ä—à—Ä—É—Ç –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –º–µ—Å—Ç–∞–º:\n1. –ú–µ—Å—Ç–æ 1\n2. –ú–µ—Å—Ç–æ 2\n3. –ú–µ—Å—Ç–æ 3"  # –ü—Ä–∏–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
        await message.answer(route, reply_markup=during_rent_keyboard())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    else:
        await message.answer("–û—à–∏–±–∫–∞! –ê—Ä–µ–Ω–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∞—Ä–µ–Ω–¥—É.", reply_markup=main_menu_keyboard())  # –ï—Å–ª–∏ –∞—Ä–µ–Ω–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞


# 1. –ù–∞—á–∞–ª–æ —Å–¥–∞—á–∏: –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏
@dp.message(F.text == "üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É")
async def finish_rent(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    # –ï—Å–ª–∏ –∞—Ä–µ–Ω–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if not data or not data.get("is_renting"):
        return await message.answer("–ê—Ä–µ–Ω–¥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")

    # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å–¥–∞—á–∏: —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã
    data["awaiting_bike_selection"] = True
    data["awaiting_quantity"] = False
    data["last_category"] = None
    # –û—á–∏—â–∞—Ç—å —Å—Ç–∞—Ä—É—é –∫–æ—Ä–∑–∏–Ω—É –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –º—ã —Ö–æ—Ç–∏–º –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –≤—ã–±–æ—Ä

    await message.answer(
        "üìù –£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥—ã –≤—ã —Å–¥–∞—ë—Ç–µ.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=categories_keyboard()
    )


@dp.message(F.text == "/stats")
async def stats(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    IGNORE_PHONES = ["79937342853"]  # –°—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

    records = get_gsheet_records()
    bikes_counter = Counter()
    total_income = 0
    total_minutes = 0
    total_rents = 0  # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ

    for row in records:
        phone = str(row.get("phone") or row.get("–¢–µ–ª–µ—Ñ–æ–Ω") or "")
        if phone in IGNORE_PHONES:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å

        cart_json = row.get("cart") or row.get("–í–µ–ª–æ—Å–∏–ø–µ–¥—ã") or "{}"
        try:
            cart = json.loads(cart_json)
        except Exception:
            cart = {}
        for cat, qty in cart.items():
            bikes_counter[cat] += int(qty)
        try:
            total_income += int(str(row.get("total_price") or row.get("–°—É–º–º–∞", "0")).replace("‚ÇΩ", "").replace(" ", ""))
            total_minutes += int(row.get("minutes") or row.get("–í—Ä–µ–º—è –ø—Ä–æ–∫–∞—Ç–∞") or 0)
        except Exception:
            pass

        total_rents += 1

    total_bikes = sum(bikes_counter.values())
    most_popular = bikes_counter.most_common(1)
    popular_bike = most_popular[0][0] if most_popular else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    avg_minutes = total_minutes // total_rents if total_rents else 0

    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∫–∞—Ç–∞</b>\n"
        f"–í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø—Ä–æ–∫–∞—Ç–æ–≤: <b>{total_rents}</b>\n"
        f"–í—Å–µ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –≤–∑—è—Ç–æ: <b>{total_bikes}</b>\n"
        f"–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–µ–ª–∏–∫: <b>{popular_bike}</b>\n"
        f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <b>{total_income} —Ä—É–±.</b>\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: <b>{avg_minutes} –º–∏–Ω</b>"
    )

@dp.message(F.text == "/refresh_commands")
async def refresh_commands(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await set_user_commands(bot)
    for admin_id in ADMIN_ID:
        await set_admin_commands(bot, admin_id)
    await message.answer("–ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

# --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã, –µ—Å–ª–∏ –∞—Ä–µ–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ --- #
@dp.message(lambda m: m.from_user.id in user_rent_data and user_rent_data[m.from_user.id].get("is_renting"))
async def status_time_active(message: types.Message):
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)
    if data and data.get("is_renting"):
        duration = datetime.now(KALININGRAD_TZ) - data["start_time"]
        minutes = int(duration.total_seconds() // 60)
        await message.answer(
            f"‚è± –°–µ–π—á–∞—Å –≤–∞—à–∞ –∞—Ä–µ–Ω–¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —É–∂–µ {minutes} –º–∏–Ω.\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É', –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∫–∞—Ç–∞—Ç—å—Å—è.",
            reply_markup=during_rent_keyboard()
        )

# --- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç --- #
@dp.message()
async def fallback(message: types.Message):
    await logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name} (id: {message.from_user.id}): {message.text}")
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëá\n"
        "–¢–∞–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ–π–¥—ë—Ç –±—ã—Å—Ç—Ä–µ–µ –∏ –±–µ–∑ –æ—à–∏–±–æ–∫!"
    )

# -------- –ó–∞–ø—É—Å–∫ -------- #
async def send_daily_report():
    from datetime import date
    from collections import Counter
    import json

    records = get_gsheet_records()
    today = date.today().isoformat()
    today_rents = [row for row in records if today in row.get("period", "")]

    if not today_rents:
        await bot.send_message(ADMIN_ID, "–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∫–∞—Ç–æ–≤ –Ω–µ –±—ã–ª–æ.")
        return

    bikes_counter = Counter()
    total_income = 0
    total_minutes = 0
    total_bikes = 0

    for row in today_rents:
        try:
            cart = json.loads(row["cart"])
        except Exception:
            cart = {}
        for cat, qty in cart.items():
            bikes_counter[cat] += int(qty)
            total_bikes += int(qty)
        total_income += int(row.get("total_price", 0))
        total_minutes += int(row.get("minutes", 0))

    most_popular = bikes_counter.most_common(1)
    popular_bike = most_popular[0][0] if most_popular else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    avg_minutes = total_minutes // len(today_rents) if today_rents else 0

    text = (
        f"üìÖ <b>–û—Ç—á—ë—Ç –∑–∞ {today}</b>\n"
        f"–ü—Ä–æ–∫–∞—Ç–æ–≤: <b>{len(today_rents)}</b>\n"
        f"–í—Å–µ–≥–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤ –≤—ã–¥–∞–ª–∏: <b>{total_bikes}</b>\n"
        f"–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤–µ–ª–∏–∫: <b>{popular_bike}</b>\n"
        f"–í—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å: <b>{total_income} —Ä—É–±.</b>\n"
        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã: <b>{avg_minutes} –º–∏–Ω</b>"
    )
    await bot.send_message(ADMIN_ID, text)

async def complete_rent_logic(message: types.Message):
    from datetime import date
    user_id = message.from_user.id
    data = user_rent_data.get(user_id)

    end_time = datetime.now(KALININGRAD_TZ)
    start_time = data["start_time"]
    duration = end_time - start_time
    total_minutes = duration.total_seconds() / 60

    # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    pay_minutes = int(round(total_minutes / 15) * 15)
    if pay_minutes == 0:
        pay_minutes = 15

    if int(total_minutes) >= 60:
        h = int(total_minutes) // 60
        m = int(total_minutes) % 60
        ride_time = f"{h} —á {m} –º–∏–Ω"
    else:
        ride_time = f"{int(total_minutes)} –º–∏–Ω"

    total_price = 0
    cart_lines = []
    for cat, qty in data["cart"].items():
        hour_price = bike_categories[cat]["hour"]
        cat_price = int(hour_price / 60 * pay_minutes * qty)
        cart_lines.append(f"‚Ä¢ <b>{cat}</b>: {qty} —à—Ç. ({hour_price}‚ÇΩ/—á)")
        total_price += cat_price

    cart_str = "\n".join(cart_lines)

    await message.answer(
        f"<b>–ê—Ä–µ–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
        f"<b>–í—Ä–µ–º—è –≤ –ø—É—Ç–∏:</b> <u>{ride_time}</u>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"<b>–í—ã –±—Ä–∞–ª–∏:</b>\n{cart_str}\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üí∞ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> <u>{total_price} —Ä—É–±.</u>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–µ–∑–¥–∫—É! –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è üòä</i>",
        parse_mode="HTML"
    )

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await bot.send_message(
            ADMIN_ID,
            f"–ó–ê–í–ï–†–®–ï–ù–ê –ê–†–ï–ù–î–ê!\n"
            f"User: {message.from_user.full_name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone') or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"id: {user_id}\n"
            f"–í—Ä–µ–º—è: {start_time.strftime('%H:%M')} ‚Äî {end_time.strftime('%H:%M')} ({ride_time})\n"
            f"–ö–æ—Ä–∑–∏–Ω–∞: {data['cart']}\n"
            f"–°—É–º–º–∞: {total_price} —Ä—É–±."
        )
    except:
        pass

    period_str = f"{date.today().isoformat()} {start_time.strftime('%H:%M')} ‚Äî {end_time.strftime('%H:%M')}"
    await save_rent_to_gsheet({
        "user_id": user_id,
        "user_name": message.from_user.full_name,
        "phone": data.get("phone"),
        "cart": data["cart"],
    }, pay_minutes, total_price, period_str)

    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
    user_rent_data[user_id] = {
        "cart": {},
        "start_time": None,
        "awaiting_quantity": False,
        "last_category": None,
        "is_renting": False,
        "phone": data.get("phone"),
        "asked_phone": False,
    }

    await message.answer(
        "–ì–æ—Ç–æ–≤–æ! –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥ —Å–Ω–æ–≤–∞.",
        reply_markup=categories_keyboard()
    )


# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π main —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
    
if __name__ == "__main__":
    asyncio.run(main())
